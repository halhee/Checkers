import ifcopenshell
import json

# Path to your IFC file
IFC_FILE_PATH = '/Users/bouznir/Desktop/checkers_ia/uploads/OLYMPI_ARCHITECTURE_DCE_-26-janvier_O.ifc'

# Recursive function to extract "Embodied Carbon" from nested IfcComplexProperty
def extract_embodied_carbon(properties):
    for key, value in properties.items():
        if isinstance(value, dict):  # Check if this is a nested dictionary
            if 'Embodied Carbon' in value.get('properties', {}):
                try:
                    return float(str(value['properties']['Embodied Carbon']).split()[0])  # Extract numeric value
                except ValueError:
                    print(f"Could not convert Embodied Carbon value: {value['properties']['Embodied Carbon']}")
            # Recursively search deeper
            result = extract_embodied_carbon(value.get('properties', {}))
            if result is not None:
                return result
    return None

# Function to calculate embodied carbon and quantities for each element
def calculate_embodied_carbon(element):
    try:
        element_psets = ifcopenshell.util.element.get_psets(element)
        embodied_carbon = None
        quantity = None

        # Search for Embodied Carbon in Material Properties, including nested IfcComplexProperty
        for pset_name, params in element_psets.items():
            if "Material Properties" in pset_name and isinstance(params, dict):
                embodied_carbon = extract_embodied_carbon(params)

        # Search for quantities in BaseQuantities
        if "BaseQuantities" in element_psets:
            base_quantities = element_psets["BaseQuantities"]
            if 'NetVolume' in base_quantities:
                try:
                    quantity = float(base_quantities['NetVolume'])
                except ValueError:
                    print(f"Could not convert NetVolume value: {base_quantities['NetVolume']}")

        return embodied_carbon, quantity
    except Exception as e:
        print(f"Error reading embodied carbon or quantity: {e}")
    return None, None

# Main logic to process the IFC file and generate an HTML report
def main():
    try:
        ifc_model = ifcopenshell.open(IFC_FILE_PATH)
        total_elements = 0
        total_carbon = 0
        element_details = []
        carbon_by_type = {}

        # Processing each element
        for element in ifc_model.by_type('IfcElement'):
            total_elements += 1
            carbon_value, quantity = calculate_embodied_carbon(element)
            element_type = element.is_a()

            # Add to element details
            total_carbon_element = (carbon_value * quantity) if carbon_value and quantity else 0
            element_details.append({
                'GlobalId': element.GlobalId,
                'Name': getattr(element, 'Name', 'Unknown'),
                'Carbon': carbon_value if carbon_value is not None else "N/A",
                'Quantity': quantity if quantity is not None else "N/A",
                'TotalCarbon': total_carbon_element
            })

            # Aggregate data by element type
            if carbon_value and quantity:
                total_carbon += total_carbon_element
                carbon_by_type[element_type] = carbon_by_type.get(element_type, 0) + total_carbon_element

        # Find the element with the highest carbon
        highest_carbon_element = max(
            element_details, key=lambda x: x['TotalCarbon'] if isinstance(x['TotalCarbon'], (int, float)) else 0
        )

        # Generate HTML report
        html_content = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carbon Analysis Summary</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f9f9f9;
            color: #333;
        }}
        h1 {{
            text-align: center;
            color: #2c3e50;
        }}
        .summary {{
            margin-bottom: 20px;
            padding: 15px;
            background-color: #ecf0f1;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }}
        .summary p {{
            margin: 5px 0;
            font-size: 16px;
        }}
        table {{
            border-collapse: collapse;
            width: 100%;
            margin-bottom: 20px;
            background-color: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }}
        table, th, td {{
            border: 1px solid #ddd;
        }}
        th, td {{
            padding: 10px;
            text-align: left;
        }}
        th {{
            background-color: #34495e;
            color: white;
        }}
        tbody tr:nth-child(even) {{
            background-color: #f2f2f2;
        }}
    </style>
</head>
<body>
    <h1>Carbon Analysis Summary</h1>
    <div class="summary">
        <p><strong>Total Elements:</strong> {total_elements}</p>
        <p><strong>Total Embodied Carbon:</strong> {total_carbon:.2f} kg CO2e</p>
        <p><strong>Highest Carbon Element:</strong> {highest_carbon_element['Name']} (ID: {highest_carbon_element['GlobalId']}) - {highest_carbon_element['TotalCarbon']:.2f} kg CO2e</p>
    </div>

    <h2>Carbon Footprint by Element Type</h2>
    <table>
        <thead>
            <tr>
                <th>Element Type</th>
                <th>Total Carbon (kg CO2e)</th>
            </tr>
        </thead>
        <tbody>
"""
        for element_type, carbon in carbon_by_type.items():
            html_content += f"""
            <tr>
                <td>{element_type}</td>
                <td>{carbon:.2f}</td>
            </tr>
"""
        html_content += """
        </tbody>
    </table>

    <h2>Element Details</h2>
    <table>
        <thead>
            <tr>
                <th>Global ID</th>
                <th>Name</th>
                <th>Embodied Carbon (kg CO2e/kg)</th>
                <th>Quantity (mÂ³)</th>
                <th>Total Embodied Carbon (kg CO2e)</th>
            </tr>
        </thead>
        <tbody>
"""
        for detail in element_details:
            html_content += f"""
            <tr>
                <td>{detail['GlobalId']}</td>
                <td>{detail['Name']}</td>
                <td>{detail['Carbon']}</td>
                <td>{detail['Quantity']}</td>
                <td>{detail['TotalCarbon']}</td>
            </tr>
"""
        html_content += """
        </tbody>
    </table>
</body>
</html>
"""
        # Write the HTML report to a file
        output_file = "carbon_analysis_summary.html"
        with open(output_file, "w") as file:
            file.write(html_content)

        print(f"Calculation completed. Report saved to {output_file}")
    except Exception as e:
        print(f"Error processing IFC file: {e}")

if __name__ == '__main__':
    main()
